import java.nio.file.Files

plugins {
    id "java"
    id "org.springframework.boot"               version "2.1.1.RELEASE"
    id "io.spring.dependency-management"        version "1.0.6.RELEASE"
    id "com.marksandspencer.acceptance-test"    version "2.0.0"
    id "com.marksandspencer.integration-test"   version "2.0.0"
    id 'com.google.cloud.tools.jib'             version '3.3.1'
    id "com.moowork.node"                       version "1.2.0"
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
    id "net.linguica.maven-settings" version "0.5"
}

apply plugin: "com.github.ManifestClasspath"

ext {
    lookupDockerHost = this.&lookupDockerHost
    lookupESRegistryHost = this.&lookupESRegistryHost
    lookupDockerRegistryUser = this.&lookupDockerRegistryUser
    lookupDockerRegistryPassword = this.&lookupDockerRegistryPassword
    lookupSslKeysDirectory = this.&lookupSslKeysDirectory
    getApplicationCredentials = this.&getApplicationCredentials
}

def lookupDockerHost() {
    System.getenv("DOCKER_HOST") ?: "unix:///var/run/docker.sock"
}

def lookupESRegistryHost() {
    System.getenv("DOCKER_REGISTRY_URL") ?: "registry-mainframeservices.platform.mnscorp.net"
}

def lookupDockerRegistryUser() {
    System.getenv("DOCKER_REGISTRY_USERNAME") ?: "DOCKER_REGISTRY_USERNAME not set"
}

def lookupDockerRegistryPassword() {
    System.getenv("DOCKER_REGISTRY_PASSWORD") ?: "DOCKER_REGISTRY_PASSWORD not set"
}

def lookupSslKeysDirectory() {
    if (!(System.getenv("DOCKER_SUPPORT_KEY") ||
            System.getenv("DOCKER_SUPPORT_CERT") ||
            System.getenv("DOCKER_SUPPORT_CA"))) {
        return null
    }

    def tempDir = Files.createTempDirectory("ssl-keys").toFile()
    new File(tempDir, "ca.pem").with {
        write(lookupEnvVar("DOCKER_SUPPORT_CA"))
    }
    new File(tempDir, "key.pem").with {
        write(lookupEnvVar("DOCKER_SUPPORT_KEY"))
    }
    new File(tempDir, "cert.pem").with {
        write(lookupEnvVar("DOCKER_SUPPORT_CERT"))
    }
    return tempDir
}

private String lookupEnvVar(String envVarKey) {
    def envVar = System.getenv(envVarKey)
    if (!envVar) {
        throw new RuntimeException("$envVarKey env var was not set.")
    }
    return envVar
}

def springBootVersion = '2.1.1.RELEASE'
def restAssuredVersion = '3.1.1'

apply from: 'gradleHelper/utils.gradle'

sourceCompatibility = JavaVersion.VERSION_11

subprojects {
    // same for all subprojects
    repositories {

        mavenCentral()
        jcenter()
        flatDir {
            dirs "$rootDir/gradle/dependencies"
        }
        maven {
            //url 'https://pkgs.dev.azure.com/MnS-Foods/ocado-es/_packaging/common-utils/maven/v1'
            url 'https://pkgs.dev.azure.com/MnS-Foods/ocado-es/_packaging/common-utils/maven/v1'
            name 'common-utils'
            credentials {
                username "Azure DevOps Services"
                //The Azure DevOps Services build system will use the "SYSTEM_ACCESSTOKEN" to authenticate to Azure DevOps Services feeds 
                password System.getenv("vstsMavenAccessToken") != null ? System.getenv("Azure DevOps Services_ENV_ACCESS_TOKEN") : vstsMavenAccessToken
            }
        }
    }
    bootJar {
        mainClassName = 'dummy.main.class.name'
    }
}


// These are all java code applications
configure(subprojects.findAll {it.name in ["dataextract","webservice","extractor","event-generator-all","extractor-data-integrity"]}){
    // all java
    apply plugin: "application"
    apply plugin: "java"
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.springframework.boot"

    dependencies {
        compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    }

    // all java apps
    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        // Change this boolean to see or not see violations in the console
        showViolations true
        // Change this to true to ignore warnings and continue the build, default:false
        ignoreFailures false
        // version of checkstyle to use. Gradle uses older version
        toolVersion "7.5.1"
        // Use own project checkstyle config, is found at the default checkstyle path config/checkstyle/checkstyle.xml
    }
    checkstyleMain.enabled = true
    checkstyleTest.enabled = true
    check.dependsOn checkstyleMain, checkstyleTest
    test.dependsOn checkstyleMain, checkstyleTest

    pmd {
        toolVersion "6.21.0"
        ignoreFailures = true
    }

    // same for all java subprojects - needs java plugin applied to work
    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources", "$rootDir/resources"
            }
        }
    }

    springBoot {
        // mainClass = mainClassName
    }

    bootRun {
        // This line loads all command line arguments into gradle
        systemProperties = System.properties
    }
}
def newrelicVersion = '7.11.1'
// These are all exposed java modules now
// we use allprojects because we are already in a loop, they are no longer subprojects but each actual project
//configure(allprojects.findAll {it.name != "stackTest"}) {
configure(subprojects.findAll {it.name in ["dataextract","webservice","extractor","event-generator-all","extractor-data-integrity"]}){
    // not stack
    // these are across all the java apps since concourse will call the tests even if there are none in the project
    apply plugin: "com.marksandspencer.integration-test"
    apply plugin: "com.marksandspencer.acceptance-test"
    apply plugin: "com.google.cloud.tools.jib"

    // not stack
    dependencies {

        compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
        compile "io.micrometer:micrometer-registry-prometheus:1.0.6"
        compile "io.micrometer:micrometer-core:1.0.6"
        compile "org.aspectj:aspectjweaver:1.9.2"

        compile "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"
        compile "commons-lang:commons-lang:2.6"
        compile "commons-collections:commons-collections:3.2"
        compile "org.apache.commons:commons-lang3:3.5"

        compile "ch.qos.logback:logback-core:1.1.11"
        compile "ch.qos.logback:logback-access:1.2.3"
        compile "net.logstash.logback:logstash-logback-encoder:4.8"
        compile "javax.xml.bind:jaxb-api:2.3.0"
        compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.3-1'
        compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'

        testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        testCompile "io.rest-assured:spring-mock-mvc:${restAssuredVersion}"
        testCompile "io.rest-assured:json-schema-validator:${restAssuredVersion}"

        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.22.0'
        testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.22.0'
        testCompile "org.junit.jupiter:junit-jupiter-engine:5.2.0"

        testRuntime("org.junit.platform:junit-platform-launcher:1.2.0")
        testRuntime("org.junit.vintage:junit-vintage-engine:5.2.0")
        runtimeOnly "com.newrelic.agent.java:newrelic-agent:$newrelicVersion"
    }

    // not stack
    group = "services"
    project.version = project.hasProperty("buildVersion") ? project["buildVersion"] : "1.0.0"
    //def registry = lookupESRegistryHost();
    def registry = project.hasProperty("dockerRegistry") ? project["dockerRegistry"] : lookupESRegistryHost()

    // not stack


    jib {

        from {
            image = 'gcr.io/distroless/java11-debian11:latest'
        }
        to {
            image = "${registry}/${group}/${rootProject.name}-${name}"
            tags = ["${project.version}"]
            auth {
                username = dockerUsername
                password = project.hasProperty("dockerPassword") ? project["dockerPassword"] : "abc"
            }
        }
        container {
            user = '5128'
            workingDirectory = '/home/mns'
            jvmFlags = [
                    '-javaagent:/app/libs/newrelic-agent-' + newrelicVersion + '.jar'
            ]
        }
    }

    // not stack
    test {
        systemProperties = System.properties
    }

    // not all java apps
    acceptanceTest {
        systemProperties = System.properties
    }

    // not all java apps
    integrationTest {
        systemProperties = System.properties
    }
}
configure(subprojects.findAll {it.name in ["dataextract","webservice","extractor","extractor-data-integrity"]}){
    dependencies {
            compile "org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}"
    }
}


configure(subprojects.findAll {it.name in ["dataextract","webservice","extractor","event-generator-all","extractor-data-integrity"]}) {
    apply plugin: "com.moowork.node"

    dependencies {
        compile "org.raml:raml-parser-2:1.0.9"
    }

    npm_install{

        copy {
            from "${project.projectDir}/../api-console/deref.js"
            into "${project.projectDir}"
        }
        copy {
            from "${project.projectDir}/../api-console/package.json"
            into "${project.projectDir}"
        }
      
        doLast {
            println("npm install complete")
        }
    }

    node {
        version = '8.1.4'
        npmVersion = '5.0.3'
        download = true
        // distBaseUrl = Custom artifactory location here for node/npm.
    }

}
